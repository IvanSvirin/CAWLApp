package com.cawlapp.cawlapp.data.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cawlapp.cawlapp.data.entity.daoconverter.DealType;
import com.cawlapp.cawlapp.data.entity.daoconverter.DealTypeConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEAL_ENTITY".
*/
public class DealEntityDao extends AbstractDao<DealEntity, Long> {

    public static final String TABLENAME = "DEAL_ENTITY";

    /**
     * Properties of entity DealEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CouponId = new Property(1, long.class, "couponId", false, "COUPON_ID");
        public final static Property VendorId = new Property(2, long.class, "vendorId", false, "VENDOR_ID");
        public final static Property CouponType = new Property(3, String.class, "couponType", false, "COUPON_TYPE");
        public final static Property Restrictions = new Property(4, String.class, "restrictions", false, "RESTRICTIONS");
        public final static Property CouponCode = new Property(5, String.class, "couponCode", false, "COUPON_CODE");
        public final static Property ExpirationDate = new Property(6, String.class, "expirationDate", false, "EXPIRATION_DATE");
        public final static Property AffiliateUrl = new Property(7, String.class, "affiliateUrl", false, "AFFILIATE_URL");
        public final static Property VendorLogoUrl = new Property(8, String.class, "vendorLogoUrl", false, "VENDOR_LOGO_URL");
        public final static Property VendorCommission = new Property(9, double.class, "vendorCommission", false, "VENDOR_COMMISSION");
        public final static Property Label = new Property(10, String.class, "label", false, "LABEL");
        public final static Property OwnersBenefit = new Property(11, boolean.class, "ownersBenefit", false, "OWNERS_BENEFIT");
        public final static Property DealType = new Property(12, String.class, "dealType", false, "DEAL_TYPE");
    }

    private final DealTypeConverter dealTypeConverter = new DealTypeConverter();

    public DealEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DealEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEAL_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COUPON_ID\" INTEGER NOT NULL ," + // 1: couponId
                "\"VENDOR_ID\" INTEGER NOT NULL ," + // 2: vendorId
                "\"COUPON_TYPE\" TEXT," + // 3: couponType
                "\"RESTRICTIONS\" TEXT," + // 4: restrictions
                "\"COUPON_CODE\" TEXT," + // 5: couponCode
                "\"EXPIRATION_DATE\" TEXT," + // 6: expirationDate
                "\"AFFILIATE_URL\" TEXT," + // 7: affiliateUrl
                "\"VENDOR_LOGO_URL\" TEXT," + // 8: vendorLogoUrl
                "\"VENDOR_COMMISSION\" REAL NOT NULL ," + // 9: vendorCommission
                "\"LABEL\" TEXT," + // 10: label
                "\"OWNERS_BENEFIT\" INTEGER NOT NULL ," + // 11: ownersBenefit
                "\"DEAL_TYPE\" TEXT);"); // 12: dealType
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DEAL_ENTITY_COUPON_ID ON DEAL_ENTITY" +
                " (\"COUPON_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEAL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DealEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCouponId());
        stmt.bindLong(3, entity.getVendorId());
 
        String couponType = entity.getCouponType();
        if (couponType != null) {
            stmt.bindString(4, couponType);
        }
 
        String restrictions = entity.getRestrictions();
        if (restrictions != null) {
            stmt.bindString(5, restrictions);
        }
 
        String couponCode = entity.getCouponCode();
        if (couponCode != null) {
            stmt.bindString(6, couponCode);
        }
 
        String expirationDate = entity.getExpirationDate();
        if (expirationDate != null) {
            stmt.bindString(7, expirationDate);
        }
 
        String affiliateUrl = entity.getAffiliateUrl();
        if (affiliateUrl != null) {
            stmt.bindString(8, affiliateUrl);
        }
 
        String vendorLogoUrl = entity.getVendorLogoUrl();
        if (vendorLogoUrl != null) {
            stmt.bindString(9, vendorLogoUrl);
        }
        stmt.bindDouble(10, entity.getVendorCommission());
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(11, label);
        }
        stmt.bindLong(12, entity.getOwnersBenefit() ? 1L: 0L);
 
        DealType dealType = entity.getDealType();
        if (dealType != null) {
            stmt.bindString(13, dealTypeConverter.convertToDatabaseValue(dealType));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DealEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCouponId());
        stmt.bindLong(3, entity.getVendorId());
 
        String couponType = entity.getCouponType();
        if (couponType != null) {
            stmt.bindString(4, couponType);
        }
 
        String restrictions = entity.getRestrictions();
        if (restrictions != null) {
            stmt.bindString(5, restrictions);
        }
 
        String couponCode = entity.getCouponCode();
        if (couponCode != null) {
            stmt.bindString(6, couponCode);
        }
 
        String expirationDate = entity.getExpirationDate();
        if (expirationDate != null) {
            stmt.bindString(7, expirationDate);
        }
 
        String affiliateUrl = entity.getAffiliateUrl();
        if (affiliateUrl != null) {
            stmt.bindString(8, affiliateUrl);
        }
 
        String vendorLogoUrl = entity.getVendorLogoUrl();
        if (vendorLogoUrl != null) {
            stmt.bindString(9, vendorLogoUrl);
        }
        stmt.bindDouble(10, entity.getVendorCommission());
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(11, label);
        }
        stmt.bindLong(12, entity.getOwnersBenefit() ? 1L: 0L);
 
        DealType dealType = entity.getDealType();
        if (dealType != null) {
            stmt.bindString(13, dealTypeConverter.convertToDatabaseValue(dealType));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DealEntity readEntity(Cursor cursor, int offset) {
        DealEntity entity = new DealEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // couponId
            cursor.getLong(offset + 2), // vendorId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // couponType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // restrictions
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // couponCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // expirationDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // affiliateUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vendorLogoUrl
            cursor.getDouble(offset + 9), // vendorCommission
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // label
            cursor.getShort(offset + 11) != 0, // ownersBenefit
            cursor.isNull(offset + 12) ? null : dealTypeConverter.convertToEntityProperty(cursor.getString(offset + 12)) // dealType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DealEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCouponId(cursor.getLong(offset + 1));
        entity.setVendorId(cursor.getLong(offset + 2));
        entity.setCouponType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRestrictions(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCouponCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExpirationDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAffiliateUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVendorLogoUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVendorCommission(cursor.getDouble(offset + 9));
        entity.setLabel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOwnersBenefit(cursor.getShort(offset + 11) != 0);
        entity.setDealType(cursor.isNull(offset + 12) ? null : dealTypeConverter.convertToEntityProperty(cursor.getString(offset + 12)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DealEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DealEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DealEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
