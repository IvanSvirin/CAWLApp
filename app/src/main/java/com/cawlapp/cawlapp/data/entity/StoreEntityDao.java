package com.cawlapp.cawlapp.data.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cawlapp.cawlapp.data.entity.daoconverter.StoreType;
import com.cawlapp.cawlapp.data.entity.daoconverter.StoreTypeConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE_ENTITY".
*/
public class StoreEntityDao extends AbstractDao<StoreEntity, Long> {

    public static final String TABLENAME = "STORE_ENTITY";

    /**
     * Properties of entity StoreEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VendorId = new Property(1, long.class, "vendorId", false, "VENDOR_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Commission = new Property(3, double.class, "commission", false, "COMMISSION");
        public final static Property ExceptionInfo = new Property(4, String.class, "exceptionInfo", false, "EXCEPTION_INFO");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property GiftCard = new Property(6, boolean.class, "giftCard", false, "GIFT_CARD");
        public final static Property IsFavorite = new Property(7, boolean.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property AffiliateUrl = new Property(8, String.class, "affiliateUrl", false, "AFFILIATE_URL");
        public final static Property LogoUrl = new Property(9, String.class, "logoUrl", false, "LOGO_URL");
        public final static Property OwnersBenefit = new Property(10, boolean.class, "ownersBenefit", false, "OWNERS_BENEFIT");
        public final static Property StoreType = new Property(11, String.class, "storeType", false, "STORE_TYPE");
    }

    private final StoreTypeConverter storeTypeConverter = new StoreTypeConverter();

    public StoreEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StoreEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VENDOR_ID\" INTEGER NOT NULL ," + // 1: vendorId
                "\"NAME\" TEXT," + // 2: name
                "\"COMMISSION\" REAL NOT NULL ," + // 3: commission
                "\"EXCEPTION_INFO\" TEXT," + // 4: exceptionInfo
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"GIFT_CARD\" INTEGER NOT NULL ," + // 6: giftCard
                "\"IS_FAVORITE\" INTEGER NOT NULL ," + // 7: isFavorite
                "\"AFFILIATE_URL\" TEXT," + // 8: affiliateUrl
                "\"LOGO_URL\" TEXT," + // 9: logoUrl
                "\"OWNERS_BENEFIT\" INTEGER NOT NULL ," + // 10: ownersBenefit
                "\"STORE_TYPE\" TEXT);"); // 11: storeType
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_STORE_ENTITY_NAME ON STORE_ENTITY" +
                " (\"NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoreEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVendorId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getCommission());
 
        String exceptionInfo = entity.getExceptionInfo();
        if (exceptionInfo != null) {
            stmt.bindString(5, exceptionInfo);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
        stmt.bindLong(7, entity.getGiftCard() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsFavorite() ? 1L: 0L);
 
        String affiliateUrl = entity.getAffiliateUrl();
        if (affiliateUrl != null) {
            stmt.bindString(9, affiliateUrl);
        }
 
        String logoUrl = entity.getLogoUrl();
        if (logoUrl != null) {
            stmt.bindString(10, logoUrl);
        }
        stmt.bindLong(11, entity.getOwnersBenefit() ? 1L: 0L);
 
        StoreType storeType = entity.getStoreType();
        if (storeType != null) {
            stmt.bindString(12, storeTypeConverter.convertToDatabaseValue(storeType));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoreEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVendorId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getCommission());
 
        String exceptionInfo = entity.getExceptionInfo();
        if (exceptionInfo != null) {
            stmt.bindString(5, exceptionInfo);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
        stmt.bindLong(7, entity.getGiftCard() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsFavorite() ? 1L: 0L);
 
        String affiliateUrl = entity.getAffiliateUrl();
        if (affiliateUrl != null) {
            stmt.bindString(9, affiliateUrl);
        }
 
        String logoUrl = entity.getLogoUrl();
        if (logoUrl != null) {
            stmt.bindString(10, logoUrl);
        }
        stmt.bindLong(11, entity.getOwnersBenefit() ? 1L: 0L);
 
        StoreType storeType = entity.getStoreType();
        if (storeType != null) {
            stmt.bindString(12, storeTypeConverter.convertToDatabaseValue(storeType));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StoreEntity readEntity(Cursor cursor, int offset) {
        StoreEntity entity = new StoreEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // vendorId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getDouble(offset + 3), // commission
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // exceptionInfo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.getShort(offset + 6) != 0, // giftCard
            cursor.getShort(offset + 7) != 0, // isFavorite
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // affiliateUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // logoUrl
            cursor.getShort(offset + 10) != 0, // ownersBenefit
            cursor.isNull(offset + 11) ? null : storeTypeConverter.convertToEntityProperty(cursor.getString(offset + 11)) // storeType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoreEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVendorId(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommission(cursor.getDouble(offset + 3));
        entity.setExceptionInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGiftCard(cursor.getShort(offset + 6) != 0);
        entity.setIsFavorite(cursor.getShort(offset + 7) != 0);
        entity.setAffiliateUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLogoUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOwnersBenefit(cursor.getShort(offset + 10) != 0);
        entity.setStoreType(cursor.isNull(offset + 11) ? null : storeTypeConverter.convertToEntityProperty(cursor.getString(offset + 11)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StoreEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StoreEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StoreEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
